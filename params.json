{"name":"Epazote","tagline":"Automated Microservices  Supervisor","body":"[![Download](https://api.bintray.com/packages/nbari/epazote/epazote/images/download.svg)](https://bintray.com/nbari/epazote/epazote/_latestVersion)\r\n[![Build Status](https://travis-ci.org/nbari/epazote.svg?branch=develop)](https://travis-ci.org/nbari/epazote)\r\n[![Coverage Status](https://coveralls.io/repos/github/nbari/epazote/badge.svg?branch=master)](https://coveralls.io/github/nbari/epazote?branch=master)\r\n\r\n# Epazote ðŸŒ¿\r\nAutomated Microservices Supervisor\r\n\r\n**Epazote** automatically update/add services specified in a file call\r\n``epazote.yml``. Periodically checks the defined endpoints and execute recovery\r\ncommands in case services responses are not behaving like expected helping with\r\nthis to automate actions in order to keep services/applications up and running.\r\n\r\nIn Continuous Integration/Deployment environments the file ``epazote.yml`` can\r\ndynamically be updated/change without need to restart the supervisor, avoiding\r\nwith this an extra dependency on the deployment flow which could imply to\r\nrestart the supervisor, in this case **Epazote**.\r\n\r\n## How it works\r\nIn its basic way of operation, **Epazote** periodically checks the services endpoints\r\n\"[URLs](https://en.wikipedia.org/wiki/Uniform_Resource_Locator)\"\r\nby doing an [HTTP GET Request](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods),\r\nbased on the response [Status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes),\r\n[Headers](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields) or\r\neither the\r\n[body](https://en.wikipedia.org/wiki/HTTP_message_body), it executes a command.\r\n\r\nIn most scenarios, is desired to apply a command directly to the application in\r\ncause, like a signal (``kill -HUP``), or either a restart (``sv restart app``),\r\ntherefore in this case **Epazote** and the application should be running on the\r\nsame server.\r\n\r\n**Epazote** can also work in a standalone mode by only monitoring and sending\r\nalerts if desired.\r\n\r\n# How to use it\r\nFirst you need to install **Epazote**, either you can compile it from\r\n[source](https://github.com/nbari/epazote)\r\nor download a pre-compiled binary matching your operating system from here:\r\nhttps://dl.bintray.com/nbari/epazote/\r\n\r\n [![Download](https://api.bintray.com/packages/nbari/epazote/epazote/images/download.svg)](https://bintray.com/nbari/epazote/epazote/_latestVersion)\r\n\r\n> To compile from source, after downloading the sources use ``make`` to build the binary\r\n\r\n**Epazote** was designed with simplicity in mind, as an easy tool for\r\n[DevOps](https://en.wikipedia.org/wiki/DevOps) and as a complement to\r\ninfrastructure orchestration tools like [Ansible](http://www.ansible.com/) and\r\n[SaltStack](http://saltstack.com/), because of this [YAML](http://www.yaml.org/)\r\nis used for the configuration files, avoiding with this, the learn of a new\r\nlanguage or syntax and simplifying the setup.\r\n\r\n## Basic example\r\n\r\n```yaml\r\nservices:\r\n    google:\r\n        url: http://www.google.com\r\n        seconds: 5\r\n        expect:\r\n            status: 200\r\n            if_not:\r\n                cmd: echo -n \"google down\"\r\n```\r\n\r\nTo supervise ``google`` you would run (basic.yml is a file containing the above code):\r\n\r\n    $ epazote -f /path/to/yaml/file/basic.yml -d\r\n\r\n> -d is for debugging, will print all output to standard output.\r\n\r\nThis basic setup will supervise every 5 seconds the service with name\r\n``google``, it will do an HTTP GET to ``http://www.google.com`` and will expect\r\nan ``200 Status code`` if not,  it will ``echo -n \"google down\"``\r\n\r\nExtending the basic example for receiving notifications:\r\n\r\n```yaml\r\nconfig:\r\n    smtp:\r\n        username: smtp@domain.tld\r\n        password: password\r\n        server: mail.example.com\r\n        port: 587\r\n        headers:\r\n            from: you@domain.tld\r\n            to: team@domain.tld\r\n            subject: \"[name - exit- status]\"\r\n\r\nservices:\r\n    google:\r\n        url: http://www.google.com\r\n        minutes: 3\r\n        expect:\r\n            status: 200\r\n            if_not:\r\n                cmd: echo -n \"google down\"\r\n                notify: yes\r\n```\r\n\r\nIn this case, every 3 minutes the service will be checked and in case of not\r\nreceiving a ``200 Status code``, besides executing the command: ``echo -n\r\n\"google down\"`` an email is going to be send to ``team@domain.tld``, this\r\nbecause of the ``notify: yes`` setting.\r\n\r\n## The configuration file\r\n\r\nThe configuration file ([YAML formated](https://en.wikipedia.org/wiki/YAML))\r\nconsists of two parts, a **config** and a **services** (Key-value pairs).\r\n\r\n## The config section\r\n\r\nThe **config** section is composed of:\r\n\r\n    - smtp (Email settings for sending notification)\r\n    - scan (Paths used to find the file 'epazote.yml')\r\n\r\nExample:\r\n\r\n```yaml\r\nconfig:\r\n    smtp:\r\n        username: smtp@domain.tld\r\n        password: password\r\n        server: mail.example.com\r\n        port: 587\r\n        headers:\r\n            from: epazote@domain.tld\r\n            to: team@domain.tld ops@domain.tld etc@domain.tld\r\n            subject: \"[_name_, _because_]\"\r\n    scan:\r\n        paths:\r\n            - /arena/home/sites\r\n            - /home/apps\r\n        minutes: 5\r\n```\r\n\r\n### config - smtp\r\n\r\nRequired to properly send alerts via email, all fields are required, the\r\n``headers`` section can be extended with any desired key-pair values.\r\n\r\n### config - smtp - subject\r\nThe subject can be formed by using this keywords: ``_because_`` ``_exit_``\r\n``_name_`` ``_output_`` ``_status_`` ``_url_`` on the previous example,\r\n``subject: [_name_, _status_]`` would transform to ``[my service - 500]``\r\nthe ``name`` has replaced by the service name, ``my service`` and\r\n``status`` by the response status code ``500`` in this case.\r\n\r\n### config - scan\r\n\r\nPaths to scan every N ``seconds``, ``minutes`` or ``hours``, a search for\r\nservices specified in a file call ``epazote.yml`` is made.\r\n\r\nThe **scan** setting is optional however is very useful when doing Continues\r\nDeployments. for example if your code is automatically uploaded to the\r\ndirectory ``/arena/home/sites/application_1`` and your scan paths contain\r\n``/arena/home/sites``, you could simple upload on your application directory a\r\nfile named ``epazote.yml`` with the service rules, thus achieving the deployment\r\nof your application and the supervising at the same time.\r\n\r\n### config (optional)\r\n\r\nAs you may notice the ``config`` section contains mainly settings for sending\r\nalerts/notifications apart from the ``scan`` setting, therefore is totally\r\noptional, meaning that **Epazote** can still run and check your services without\r\nthe need of the ``config`` section.\r\n\r\nIf you want to automatically update/load services you will need the\r\n``config - scan`` setting.\r\n\r\n\r\n## The services section\r\n\r\nServices are the main functionality of **Epazote**, is where the URL's and the\r\nrules based on the response are defined, since options vary from service to\r\nservice, an example could help better to understand the setup:\r\n\r\n```yaml\r\nservices:\r\n    my service 1:\r\n        url: http://myservice.domain.tld/_healthcheck_\r\n        timeout: 5\r\n        seconds: 60\r\n        log: http://monitor.domain.tld\r\n        expect:\r\n            status: 200\r\n            header:\r\n                content-type: application/json\r\n            body: find this string on my site\r\n            if_not:\r\n                cmd: sv restart /services/my_service_1\r\n                notify: team@domain.tld\r\n                msg: |\r\n                    line 1 bla bla\r\n                    line 2\r\n        if_status:\r\n            500:\r\n                cmd: reboot\r\n            404:\r\n                cmd: sv restart /services/cache\r\n                msg: restarting cache\r\n                notify: team@domain.tld x@domain.tld\r\n        if_header:\r\n            x-amqp-kapputt:\r\n                cmd: restart abc\r\n                notify: bunny@domain.tld\r\n                msg: |\r\n                    The rabbit is angry\r\n                    & hungry\r\n            x-db-kapputt:\r\n                cmd: svc restart /services/db\r\n\r\n    other service:\r\n        url: https://self-signed.ssl.tld/ping\r\n        header:\r\n            Origin: http://localhost\r\n            Accept-Encoding: gzip\r\n        insecure: true\r\n        minutes: 3\r\n\r\n    redirect service:\r\n        url: http://test.domain.tld/\r\n        follow: yes\r\n        hour: 1\r\n        expect:\r\n            status: 302\r\n            if_not:\r\n                cmd: service restart abc\r\n                notify: yes\r\n                emoji: 1F600-1F621\r\n\r\n    salt-master:\r\n        test: pgrep -f salt\r\n        if_not:\r\n            cmd: service restart salt_master\r\n            notify: operations@domain.tld\r\n```\r\n\r\n### services - name of service (string)\r\nAn unique string that identifies your service, in the above example, there are 3\r\nservices named:\r\n - my service 1\r\n - other service\r\n - redirect service\r\n\r\n### services - url (string)\r\nURL of the service to supervise\r\n\r\n### services - follow (boolean true/false)\r\nBy default if a [302 Status code](https://en.wikipedia.org/wiki/HTTP_302) is\r\nreceived, **Epazote** will not follow it, if you would like to follow all\r\nredirects, this setting must be set to **true**.\r\n\r\n### services - insecure (boolean true/false)\r\nThis option explicitly allows **Epazote** to perform \"insecure\" SSL connections.\r\nIt will disable the certificate verification.\r\n\r\n### services - stop (int)\r\nDefines the number or times the ``cmd`` will be executed, by default the ``cmd``\r\nis executed only once, with the intention to avoid indefinitely loops. If value\r\nis set to ``-1`` the ``cmd`` never stops. defaults to 0, ``stop 2`` will execute\r\n\"0, 1, 2\" (3 times) the ``cmd``.\r\n\r\n### services - timeout in seconds (int)\r\nTimeout specifies a time limit for the HTTP requests, A value of zero means no\r\ntimeout, defaults to 5 seconds.\r\n\r\n### services - retry_limit (int)\r\nSpecifies the number of times to retry an request, defaults to 3.\r\n\r\n### services - retry_interval (int)\r\nSpecifies the time between attempts in milliseconds. The default value is 500 (0.5 seconds).\r\n\r\n### services - read_limit (int)\r\nRead only ``N`` number of bytes instead of the full\r\nbody. This helps to make a more \"complete\" request and\r\navoid getting an HTTP status code [408 when testing aws ELB](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/ts-el b-error-message.html#ts-elb-errorcodes-http408).\r\n\r\n### services - seconds, minutes, hours\r\nHow often to check the service, the options are: (Only one should be used)\r\n - seconds N\r\n - minutes N\r\n - hours N\r\n\r\n``N`` should be an integer.\r\n\r\n### services - log (URL)\r\nAn URL to post all events, default disabled.\r\n\r\n### services - expect\r\nThe ``expect`` block options are:\r\n- status (int)\r\n- header (key, value)\r\n- body   (regular expression)\r\n- if_not (Action block)\r\n\r\n### services - expect - status\r\nAn Integer representing the expected [HTTP Status Code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\r\n\r\n### services - expect - header (start_with match)\r\nA key-value map of expected headers, it can be only one or more.\r\n\r\nThe headers will be considered valid if they starts with the required value,\r\nfor example if you want to check for ``Content-type: application/json; charset=utf-8``\r\nyou can simple do something like:\r\n\r\n```yaml\r\n    header:\r\n        Content-Type: application/json\r\n```\r\n\r\nThis helps to simplify the matching and useful in cases where the headers\r\nchanges, for example: ``Content-Range: bytes 100-64656926/64656927`` can be\r\nmatched with:\r\n\r\n```yaml\r\n    header:\r\n        Content-Range: bytes\r\n```\r\n\r\n### services - expect - body\r\nA [regular expression](https://en.wikipedia.org/wiki/Regular_expression) used\r\nto match a string on the body of the site, use full in cases you want to ensure\r\nthat the content delivered is always the same or keeps a pattern.\r\n\r\n### services - expect (How it works)\r\nThe ``expect`` logic tries to implement a\r\n[if-else](https://en.wikipedia.org/wiki/if_else) logic ``status``, ``header``,\r\n``body`` are the **if** and the ``if_not`` block becomes the **else**.\r\n\r\n    if\r\n        status\r\n        header\r\n        body\r\n    else:\r\n        if_not\r\n\r\nIn must cases only one option is required, check on the above example for the service named \"redirect service\".\r\n\r\nIn case that more than one option is used, this is the order in how they are evaluated, no meter how they where introduced on the configuration file:\r\n\r\n    1. body\r\n    2. status\r\n    3. header\r\n\r\nThe reason for this order is related to performance, at the end we want to\r\nmonitor/supervise the services in an efficient way avoiding to waste extra\r\nresources, in must cases only the HTTP Headers are enough to take an action,\r\ntherefore we don't need to read the full body page, because of this if no\r\n``body`` is defined, **Epazote** will only read the Headers saving with this\r\ntime and process time.\r\n\r\n### services - expect - if_not\r\n``if_not`` is a block with an action of what to do it we don't get what we where\r\nexpecting (``expect``). See services - Actions\r\n\r\n### services - if_status  & if_header\r\nThere maybe cases in where third-party dependencies are down and because of this\r\nyour application could not be working properly, for this cases the ``if_status``\r\nand ``if_header`` could be useful.\r\n\r\nFor example if the database is your application could start responding an status\r\ncode 500 or either a custom header and based on does values take execute an\r\naction:\r\n\r\nThe format for ``if_status`` is a key-pair where key is an int representing an\r\nHTTP status code, and the value an Action option\r\n\r\nThe format for ``if_header`` is a key-pair where key is a string of something\r\nyou could relate/match and has in other if_X conditions, value is an Action.\r\n\r\nThis are the only ``if's`` and the order of execution:\r\n 1. if_status\r\n 2. if_header\r\n 3. if_not\r\n\r\nThis means that if a service uses ``if_status`` and ``if_not``, it will\r\nevaluate first the ``if_status`` and execute an Action if required, in case\r\nan ``if_status`` and ``if_header`` are set, same applies, first is evaluated\r\n``if_status``, then ``if_header`` and last ``if_not``.\r\n\r\n## services - Actions\r\nAn Action has five options:\r\n - cmd\r\n - notify\r\n - msg\r\n - emoji\r\n - http\r\n\r\nThey can be used all together, only one or either none.\r\n\r\n### services - Actions - cmd (string)\r\n``cmd`` Contains the command to be executed.\r\n\r\n### services - Actions - notify (string)\r\n``notify`` Should contain ``yes``, the email email address or addresses (space separated)\r\nof the recipients that will be notified when the action is executed.\r\n\r\nIf the string is ``yes`` the global recipients will be used.\r\n\r\n### services - Actions - msg (list)\r\n```yaml\r\nmsg:\r\n - send this if exit 0 (all OK)\r\n - send this if exit 1 (something is wrong)\r\n```\r\nBased on the exit status either msg[0] or msg[1] is used,\r\n\r\n### services - Actions - emoji (list)\r\n``emoji`` [Unicode](https://en.wikipedia.org/wiki/Unicode) characters\r\nto be used in the subject, example:\r\n```yaml\r\nemoji:\r\n  - 1F600\r\n  - 1F621\r\n```\r\nIf services are OK they will use the first ``1F600`` if not they will\r\nuse ``1F621``, if set to ``0`` no emoji will be used. The idea behind using\r\n[unicode/emoji](https://en.wikipedia.org/wiki/Emoticons_(Unicode_block))\r\nis to cough attention faster and not just ignore the email thinking is spam.\r\n\r\n### service - Actions - http (list(key, value))\r\nA custom URL to GET/POST depending on the exit status, example:\r\n```yaml\r\nhttp:\r\n  - url: \"https://api.hipchat.com/v1/rooms/message?auth_token=your_token&room_id=7&from=Alerts&message=service+OK+_name_+_because_\"\r\n  - url: \"https://api.hipchat.com/\"\r\n    header:\r\n      Content-Type: application/x-www-form-urlencoded\r\n    data: |\r\n     room_id=10&from=Alerts&message=_name_+exit+code+_exit_\r\n    method: POST\r\n```\r\nWhen a service fails or returns an exit 1 the second url\r\n``https://api.hipchat.com/`` with method ``POST`` and the custom ``data``\r\nwill be used, notice that all the ocurances on the data that are within an\r\n``_(key)_`` will be replaced with the corresponding value, in this case:\r\n\r\n     room_id=10&from=Alerts&message=_name_+exit+code+_exit_\r\n\r\nwill be replaced with:\r\n\r\n     room_id=10&from=Alerts&message=SERVICE NAME+exit+code+0\r\n\r\nWhen recovery the first url will be used, in this case will be a GET instead of a post, so:\r\n\r\n    https://api.hipchat.com/v1/rooms/message?auth_token=your_token&room_id=7&from=Alerts&message=service+OK+_name_+_because_\r\n\r\nbecomes:\r\n\r\n    https://api.hipchat.com/v1/rooms/message?auth_token=your_token&room_id=7&from=Alerts&message=service+OK+SERVICE+NAME+STATUS+200\r\n\r\n> notice that the _name_, _exit_, _because_ are been replaced with the values of name, exit, because of the service.\r\n\r\n\r\n## services - Test\r\n**Epazote** It is mainly used for HTTP services, for supervising other\r\napplications that don't listen or accept HTTP connections, like a database,\r\ncache engine, etc. There are tools like\r\n[daemontools](https://cr.yp.to/daemontools.html),\r\n[runit](http://smarden.org/runit/) as already mentioned, even so, **Epazote**\r\ncan eventually be used to execute an action based on the exit of a command\r\nfor example:\r\n\r\n```yaml\r\n    salt-master:\r\n        test: pgrep -f salt\r\n        if_not:\r\n            cmd: service restart salt_master\r\n            notify: operations@domain.tld\r\n```\r\n\r\nIn this case: ``test: pgrep -f salt`` will execute the ``cmd`` on the ``if_not``\r\nblock in case the exit code is > 0, from the ``pgrep`` man page:\r\n\r\n```txt\r\nEXIT STATUS\r\n     The pgrep and pkill utilities return one of the following values upon exit:\r\n\r\n          0       One or more processes were matched.\r\n          1       No processes were matched.\r\n          2       Invalid options were specified on the command line.\r\n          3       An internal error occurred.\r\n```\r\n\r\n\r\n## Extra setup\r\n*green dots give some comfort* -- Because of this when using the ``log``\r\noption an extra service could be configure as a receiver for all the post\r\nthat **Epazote** produce and based on the data obtained create a custom\r\ndashboard, something similar to: https://status.cloud.google.com/ or\r\nhttp://status.aws.amazon.com/\r\n\r\n# Issues\r\nPlease report any problem, bug, here: https://github.com/nbari/epazote/issues\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}