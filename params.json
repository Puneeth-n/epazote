{"name":"Epazote","tagline":"Microservices  supervisor","body":"[![Build Status](https://drone.io/github.com/nbari/epazote/status.png)](https://drone.io/github.com/nbari/epazote/latest)\r\n[![Build Status](https://travis-ci.org/nbari/epazote.svg?branch=develop)](https://travis-ci.org/nbari/epazote)\r\n\r\n# Epazote ðŸŒ¿\r\nMicroservices supervisor\r\n\r\n## Why ?\r\nThere are good supervisors,\r\n[daemontools](https://cr.yp.to/daemontools.html),\r\n[runit](http://smarden.org/runit/) just to mention some, on most cases is just\r\na matter of uploading code to the server, create a run script and you are all\r\nset, your code will start up and live forever, so far so good, but let's face\r\nit, \"stuff happens\", suddenly the site or application can stop responding\r\nrequest, display unwanted content, etc. here is where **Epazote** comes into\r\naction.\r\n\r\n## The problem to solve\r\nOnce your site/application is up and running, it can become idle and\r\nunresponsive, your supervisor will not notice this, since in most of the cases\r\nis just responsible for keeping your App process up and running no matter how it\r\nis behaving, therefore exists the need to monitor the status of the application\r\nand based on the responses take actions.\r\n\r\nWhen doing Continuous Deployment \"[CD](https://en.wikipedia.org/wiki/Continuous_delivery)\"\r\nif the ping, healthcheck, status, etc; endpoints change, it implies making changes\r\nin order to properly monitor the application, this creates a dependency or extra\r\ntask apart from the CD process, therefore exists the need to detect any changes\r\nand automatically apply them upon request.\r\n\r\n## How it works\r\nIn its basic way of operation, **Epazote** periodically checks the services endpoints\r\n\"[URLs](https://en.wikipedia.org/wiki/Uniform_Resource_Locator)\"\r\nby doing an [HTTP GET Request](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods),\r\nbased on the response [Status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes),\r\n[Headers](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields) or\r\neither the\r\n[body](https://en.wikipedia.org/wiki/HTTP_message_body), it executes a command.\r\n\r\nIn most scenarios, is desired to apply a command directly to the application in\r\ncause, like a signal (``kill -HUP``), or either a restart (``sv restart app``),\r\ntherefore in this case **Epazote** and the application should be running on the same\r\nserver.\r\n\r\n**Epazote** can also work in a standalone mode by only monitoring and sending alerts\r\nif desired.\r\n\r\n# How to use it\r\nFirst you need to install **Epazote**, either you can compile it from [source](https://github.com/nbari/epazote)\r\nor download a pre-compiled binary matching your operating system.\r\n\r\n> To compile from source, after downloading the sources use ``make`` to build the binary\r\n\r\n**Epazote** was designed with simplicity in mind, as an easy tool for\r\n[DevOps](https://en.wikipedia.org/wiki/DevOps) and as a complement to\r\ninfrastructure orchestration tools like [Ansible](http://www.ansible.com/) and\r\n[SaltStack](http://saltstack.com/), because of this [YAML](http://www.yaml.org/)\r\nis used for the configuration files, avoiding with this, the learn of a new\r\nlanguage or syntax, and simplifying the setup.\r\n\r\n## The configuration file\r\n\r\nThe configuration file ([YAML formated](https://en.wikipedia.org/wiki/YAML))\r\nconsists of two parts, a **config** and a **services** (Key-value pairs).\r\n\r\nThe **config** section is composed of three blocks:\r\n\r\n    - post (Url to post the logs)\r\n    - smtp (Email settings for sending notification)\r\n    - scan (Paths used to find the file 'epazote.yml')\r\n\r\nExample:\r\n\r\n```yaml\r\nconfig:\r\n    post: http://domain.tld/get/json/\r\n    smtp:\r\n        username: smtp@domain.tld\r\n        password: password\r\n        host: smtp.domain.tld\r\n        port: 587\r\n        tls: true\r\n        headers:\r\n            from: epazote@domain.tld\r\n            to: team@domain.tld ops@domain.tld etc@domain.tld\r\n            subject: [%s -%s], Service, Status\r\n    scan:\r\n        paths:\r\n            - /arena/home/sites\r\n            - /home/apps\r\n        minutes: 5\r\n```\r\n\r\nTODO....\r\n\r\n```yaml\r\nservices:\r\n    my service 1:\r\n        url: http://myservice.domain.tld/_healthcheck_\r\n        timeout: 5\r\n        seconds: 60\r\n        log: True\r\n        expect:\r\n            status: 200\r\n            header:\r\n                content-type: application/json; charset=UTF-8\r\n            body: find this string on my site\r\n        if_not:\r\n            cmd: sv restart /services/my_service_1\r\n            notify: team@domain.tld\r\n            msg: |\r\n                line 1 bla bla\r\n                line 2\r\n        if_status:\r\n            500:\r\n                cmd: reboot\r\n            404:\r\n                cmd: sv restart /services/cache\r\n                msg: restarting cache\r\n                notify: team@domain.tld x@domain.tld\r\n        if_header:\r\n            x-amqp-kapputt:\r\n                cmd: restart abc\r\n                notify: bunny@domain.tld\r\n                msg: |\r\n                    The rabbit is angry\r\n                    & hungry\r\n            x-db-kapputt:\r\n                cmd: svc restart /services/db\r\n\r\n    other service:\r\n        url: http://other-service.domain.tld/ping\r\n        minutes: 3\r\n\r\n    redirect service:\r\n        url: http://test.domain.tld/\r\n        hour: 1\r\n        expect:\r\n            status: 302\r\n        if_not:\r\n            cmd: service restart abc\r\n            notify: abc@domain.tld\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}