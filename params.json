{"name":"Epazote","tagline":"Microservices  supervisor","body":"[![Build Status](https://drone.io/github.com/nbari/epazote/status.png)](https://drone.io/github.com/nbari/epazote/latest)\r\n[![Build Status](https://travis-ci.org/nbari/epazote.svg?branch=develop)](https://travis-ci.org/nbari/epazote)\r\n\r\n# Epazote ðŸŒ¿\r\nMicroservices supervisor\r\n\r\n## Why ?\r\nThere are good supervisors,\r\n[daemontools](https://cr.yp.to/daemontools.html),\r\n[runit](http://smarden.org/runit/) just to mention some, on most cases is just\r\na matter of uploading code to the server, create a run script and you are all\r\nset, your code will start up and live forever, so far so good, but let's face\r\nit, \"stuff happens\", suddenly the site or application can stop responding\r\nrequest, display unwanted content, etc. here is where **Epazote** comes into\r\naction.\r\n\r\n## The problem to solve\r\nOnce your site/application is up and running, it can become idle and\r\nunresponsive, your supervisor will not notice this, since in most of the cases\r\nis just responsible for keeping your App process up and running no matter how it\r\nis behaving, therefore exists the need to monitor the status of the application\r\nand based on the responses take actions.\r\n\r\nWhen doing Continuous Deployment \"[CD](https://en.wikipedia.org/wiki/Continuous_delivery)\"\r\nif the ping, healthcheck, status, etc; endpoints change, it implies making changes\r\nin order to properly monitor the application, this creates a dependency or extra\r\ntask apart from the \"CD\" process, therefore exists the need to detect any changes\r\nand automatically apply them upon request.\r\n\r\n## How it works\r\nIn its basic way of operation, **Epazote** periodically checks the services endpoints\r\n\"[URLs](https://en.wikipedia.org/wiki/Uniform_Resource_Locator)\"\r\nby doing an [HTTP GET Request](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods),\r\nbased on the response [Status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes),\r\n[Headers](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields) or\r\neither the\r\n[body](https://en.wikipedia.org/wiki/HTTP_message_body), it executes a command.\r\n\r\nIn most scenarios, is desired to apply a command directly to the application in\r\ncause, like a signal (``kill -HUP``), or either a restart (``sv restart app``),\r\ntherefore in this case **Epazote** and the application should be running on the\r\nsame server.\r\n\r\n**Epazote** can also work in a standalone mode by only monitoring and sending\r\nalerts if desired.\r\n\r\n# How to use it\r\nFirst you need to install **Epazote**, either you can compile it from\r\n[source](https://github.com/nbari/epazote)\r\nor download a pre-compiled binary matching your operating system.\r\n\r\n> To compile from source, after downloading the sources use ``make`` to build the binary\r\n\r\n**Epazote** was designed with simplicity in mind, as an easy tool for\r\n[DevOps](https://en.wikipedia.org/wiki/DevOps) and as a complement to\r\ninfrastructure orchestration tools like [Ansible](http://www.ansible.com/) and\r\n[SaltStack](http://saltstack.com/), because of this [YAML](http://www.yaml.org/)\r\nis used for the configuration files, avoiding with this, the learn of a new\r\nlanguage or syntax, and simplifying the setup.\r\n\r\n## The configuration file\r\n\r\nThe configuration file ([YAML formated](https://en.wikipedia.org/wiki/YAML))\r\nconsists of two parts, a **config** and a **services** (Key-value pairs).\r\n\r\n## The config section\r\n\r\nThe **config** section is composed of three settings:\r\n\r\n    - post (Url to post the logs)\r\n    - smtp (Email settings for sending notification)\r\n    - scan (Paths used to find the file 'epazote.yml')\r\n\r\nExample:\r\n\r\n```yaml\r\nconfig:\r\n    post: http://domain.tld/get/json/\r\n    smtp:\r\n        username: smtp@domain.tld\r\n        password: password\r\n        server: mail.example.com\r\n        port: 587\r\n        headers:\r\n            from: epazote@domain.tld\r\n            to: team@domain.tld ops@domain.tld etc@domain.tld\r\n            subject: [%s -%s], Service, Status\r\n    scan:\r\n        paths:\r\n            - /arena/home/sites\r\n            - /home/apps\r\n        minutes: 5\r\n```\r\n\r\n### config - post\r\n\r\nAn URL to post all activity related to the services if log is enable on the\r\nservice. The **post** setting is optional.\r\n\r\n### config - smtp\r\n\r\nRequired to properly send alerts via email, all fields are required, the\r\n``headers`` section can be extended with any desired key-pair values.\r\n\r\n### config - scan\r\n\r\nPaths to scan every N ``seconds``, ``minutes`` or ``hours``, a search for\r\nservices specified in a file call ``epazote.yml`` is made.\r\n\r\nThe **scan** setting is optional however is very useful when doing Continues\r\nDeployments. for example if your code is automatically uploaded to the\r\ndirectory ``/arena/home/sites/application_1`` and your scan paths contain\r\n``/arena/home/sites``, you could simple upload on your application directory a\r\nfile named ``epazote.yml`` with the service rules, thus achieving the deployment\r\nof your application and the supervising at the same time.\r\n\r\n### config (optional)\r\n\r\nAs you may notice the ``config`` section contains mainly settings for sending\r\nalerts/notifications apart from the ``scan`` setting, therefore is totally\r\noptional, meaning that **Epazote** can still run and check your services without\r\nthe need of the ``config`` section.\r\n\r\nIf you want to automatically update/load services you will need the\r\n``config - scan`` setting.\r\n\r\n\r\n## The services section\r\n\r\nServices are the main functionality of **Epazote**, is where the URL's and the\r\nrules based on the response are defined, since options vary from service to\r\nservice, an example could help better to understand the setup:\r\n\r\n```yaml\r\nservices:\r\n    my service 1:\r\n        url: http://myservice.domain.tld/_healthcheck_\r\n        timeout: 5\r\n        seconds: 60\r\n        log: True\r\n        expect:\r\n            status: 200\r\n            header:\r\n                content-type: application/json; charset=UTF-8\r\n            body: find this string on my site\r\n            if_not:\r\n                cmd: sv restart /services/my_service_1\r\n                notify: team@domain.tld\r\n                msg: |\r\n                    line 1 bla bla\r\n                    line 2\r\n        if_status:\r\n            500:\r\n                cmd: reboot\r\n            404:\r\n                cmd: sv restart /services/cache\r\n                msg: restarting cache\r\n                notify: team@domain.tld x@domain.tld\r\n        if_header:\r\n            x-amqp-kapputt:\r\n                cmd: restart abc\r\n                notify: bunny@domain.tld\r\n                msg: |\r\n                    The rabbit is angry\r\n                    & hungry\r\n            x-db-kapputt:\r\n                cmd: svc restart /services/db\r\n\r\n    other service:\r\n        url: http://other-service.domain.tld/ping\r\n        minutes: 3\r\n\r\n    redirect service:\r\n        url: http://test.domain.tld/\r\n        hour: 1\r\n        expect:\r\n            status: 302\r\n        if_not:\r\n            cmd: service restart abc\r\n            notify: abc@domain.tld\r\n```\r\n\r\n### services - name of service (string)\r\nAn unique string that identifies your service, in the above example, there are 3\r\nservices named:\r\n - my service 1\r\n - other service\r\n - redirect service\r\n\r\n### services - url (string)\r\nURL of the service to supervise\r\n\r\n### services - timeout in seconds (int)\r\nTimeout specifies a time limit for the HTTP requests, A value of zero means no\r\ntimeout, defaults to 5 seconds.\r\n\r\n### services - seconds, minutes, hours\r\nHow often to check the service, the options are: (Only one should be used)\r\n - seconds N\r\n - minutes N\r\n - hours N\r\n\r\n``N`` should be an integer.\r\n\r\n### services - log (bool)\r\nIf set to true, it will post all events to the defined ``post`` URL on the **config** section, defaults to false.\r\n\r\n### services - expect\r\nThe ``expect`` block options are:\r\n- status (int)\r\n- header (string)\r\n- body   (regular expression)\r\n- if_not (Action block)\r\n\r\n### services - expect - status\r\nAn Integer representing the expected [HTTP Status Code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\r\n\r\n### services - expect - header\r\nA key-value map of expected headers, it can be only one or more.\r\n\r\n### services - expect - body\r\nA [regular expression](https://en.wikipedia.org/wiki/Regular_expression) used to match a string on the body of the site, use full in cases you want to ensure that the content delivered is always the same or keeps a pattern.\r\n\r\n### services - expect (How it works)\r\nThe ``expect`` logic tries to implement a [if-else](https://en.wikipedia.org/wiki/if_else) logic ``status``, ``header``, ``body`` are the **if** and the ``if_not`` block becomes the **else**.\r\n\r\n    if\r\n        status\r\n        header\r\n        body\r\n    else:\r\n        if_not\r\n\r\nIn must cases only one option is required, check on the above example for the service named \"redirect service\".\r\n\r\nIn case that more than one option is used, this is the order in how they are evaluated, no meter how they where introduced on the configuration file:\r\n\r\n    1. body\r\n    2. status\r\n    3. header\r\n\r\nThe reason for this order is related to performance, at the end we want to monitor/supervise the services in an efficient way avoiding to waste extra resources, in must cases only the HTTP Headers are enough to take an action, therefore we don't need to read the full body page, because of this if no ``body`` is defined, **Epazote** will only read the Headers saving with this time and process time.\r\n\r\n### services - expect - if_not\r\n``if_not`` is a block with an action of what to do it we don't get what we where expecting (``expect``). See services - Actions\r\n\r\n## services - Actions\r\nAn Action has tree options:\r\n - cmd\r\n - notify\r\n - msg\r\n\r\nThey can be used all together, only one or either none.\r\n\r\n### services - Actions - cmd (string)\r\n``cmd`` Contains the command to be executed.\r\n\r\n### services - Actions - notify (string)\r\n``notify`` Should contain the email email address or addresses (space separated) of the recipients that will be notified when the action is executed.\r\n\r\n### services - Actions - msg (string)\r\n``msg`` The message to send when the action is executed.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}